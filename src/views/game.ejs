<html>

<head>
  <meta charset='utf-8' />
  <title>App</title>

  <script src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js" defer></script>
  <script src="https://cdn.socket.io/4.0.0/socket.io.min.js"></script>
  <link rel="stylesheet" href="/styles.css" />
</head>

<body x-data="game('<%= gameId %>')" x-init="connect()">
  <div id="board" class="board">
    <% for (let row=0; row < 8; row++) { %>
      <div class="row">
        <% for (let col=0; col < 8; col++) { const file=side==='black' ? String.fromCharCode(104 - col) :
          String.fromCharCode(97 + col); const rank=side==='black' ? row + 1 : 8 - row; const id=file + rank; const
          isWhite=(row + col) % 2===0; const colorClass=isWhite ? 'white-square' : 'black-square' ; %>
          <div class="square <%= colorClass %>" id="<%= id %>">
            <span class="piece" :aria-selected="selected==='<%= id %>'" :aria-movable="movable['<%= id %>']"
              :class="board['<%= id %>']?.owner" x-show="board['<%= id %>'] || movable['<%= id %>']"
              x-text="board['<%= id %>']?.piece"
              x-on:click="movable['<%= id %>'] ? move('<%= id %>') : select('<%= id %>')">
            </span>
          </div>
          <% } %>
      </div>
      <% } %>
  </div>

  <script src="/chess.js"></script>
  <script>
    function game(invitationId) {
      return {
        board: {},
        captured: [],
        selected: undefined,
        movable: {},
        socket: null,
        async connect() {
          await new Promise(r => setTimeout(r, 2000));
          this.socket = io('http://localhost:3000');

          this.socket.on('connect', () => {
            this.socket.emit('join', { invitationId });
          });

          this.socket.on('board', (board) => {
            const decoded = decode(board);
            this.board = decoded.board;
            this.captured = decoded.captured;
          });
        },
        select(position) {
          if (position === this.selected) {
            this.selected = undefined;
            this.movable = {};
            return;
          }
          const piece = this.board[position];
          if (!piece) {
            return console.error('Invalid position');
          }
          this.selected = position;
          this.movable = getPossibleMoves(position, this.board);
        },
        move(position) {
          if (!this.movable[position]) {
            return;
          }
          const move = `${this.selected}:${position}`
          const capturedPiece = this.board[position];
          if (capturedPiece) {
            this.captured.push(capturedPiece);
          }
          this.board[position] = this.board[this.selected];
          delete this.board[this.selected];
          this.selected = undefined;
          this.movable = {};
          this.socket.emit('move', { invitationId,  move });
        },
      };
    }
  </script>
</body>

</html>